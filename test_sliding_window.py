#!/usr/bin/env python3
"""
Script de prueba para verificar el mecanismo de sliding window
en la gesti√≥n del historial conversacional.

Este script simula m√∫ltiples iteraciones de conversaci√≥n para verificar
que el historial se limita correctamente cuando alcanza el l√≠mite de tokens.
"""

import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src', 'agent'))

from conversation_manager import ConversationManager
import logging

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)


def test_sliding_window():
    """Prueba el mecanismo de sliding window"""
    
    print("="*80)
    print("TEST: Mecanismo de Sliding Window")
    print("="*80)
    
    # Configuraci√≥n de prueba con l√≠mites bajos para ver el efecto
    config = {
        'max_history_turns': 5,
        'context_window_tokens': 500,  # L√≠mite bajo para testing
        'enable_sliding_window': True,
        'min_turns_to_keep': 2
    }
    
    # Crear conversation manager
    conv_manager = ConversationManager(config)
    session_id = "test-session-sliding-window"
    
    # Crear conversaci√≥n
    conv_manager.create_conversation(session_id)
    
    print(f"\nüìã Configuraci√≥n:")
    print(f"   ‚Ä¢ Max history turns: {config['max_history_turns']}")
    print(f"   ‚Ä¢ Context window tokens: {config['context_window_tokens']}")
    print(f"   ‚Ä¢ Sliding window enabled: {config['enable_sliding_window']}")
    
    # Simular m√∫ltiples turnos de conversaci√≥n
    print(f"\nüîÑ Simulando conversaci√≥n con m√∫ltiples turnos...\n")
    
    for i in range(10):
        # Mensaje del usuario (simulando contenido largo)
        user_message = f"Esta es la pregunta n√∫mero {i+1}. " * 20  # ~100 tokens
        conv_manager.add_user_turn(
            session_id=session_id,
            message=user_message,
            tokens=len(user_message.split())
        )
        
        # Respuesta del asistente (simulando contenido largo)
        assistant_message = f"Esta es la respuesta n√∫mero {i+1}. " * 20  # ~100 tokens
        conv_manager.add_assistant_turn(
            session_id=session_id,
            response=assistant_message,
            tokens=len(assistant_message.split())
        )
        
        # Obtener estad√≠sticas
        stats = conv_manager.get_conversation_stats(session_id)
        
        print(f"Turno {i+1}:")
        print(f"   ‚Ä¢ Total turnos: {stats['total_turns']}")
        print(f"   ‚Ä¢ Total tokens: {stats['total_tokens']}")
        
        # Obtener contexto con sliding window
        context = conv_manager.trim_context_to_window(
            session_id=session_id,
            max_tokens=config['context_window_tokens']
        )
        
        turns_in_context = context.count('Human:')
        print(f"   ‚Ä¢ Turnos en contexto (despu√©s de sliding window): {turns_in_context}")
        print(f"   ‚Ä¢ Tokens en contexto: ~{len(context.split())}")
        
        if turns_in_context < stats['total_turns'] // 2:
            print(f"   ‚ö†Ô∏è  Sliding window activado: {stats['total_turns'] // 2 - turns_in_context} turnos eliminados")
        
        print()
    
    # Mostrar resumen final
    print("="*80)
    print("RESUMEN FINAL")
    print("="*80)
    
    final_stats = conv_manager.get_conversation_stats(session_id)
    print(f"\nüìä Estad√≠sticas finales:")
    print(f"   ‚Ä¢ Total turnos en conversaci√≥n: {final_stats['total_turns']}")
    print(f"   ‚Ä¢ Total tokens acumulados: {final_stats['total_tokens']}")
    
    # Contexto completo vs contexto con sliding window
    full_context = conv_manager.get_conversation_context(session_id)
    trimmed_context = conv_manager.trim_context_to_window(
        session_id=session_id,
        max_tokens=config['context_window_tokens']
    )
    
    turns_full = full_context.count('Human:')
    turns_trimmed = trimmed_context.count('Human:')
    
    print(f"\nüîç Comparaci√≥n de contextos:")
    print(f"   ‚Ä¢ Turnos en contexto completo: {turns_full}")
    print(f"   ‚Ä¢ Turnos en contexto trimmed: {turns_trimmed}")
    print(f"   ‚Ä¢ Turnos eliminados: {turns_full - turns_trimmed}")
    print(f"   ‚Ä¢ Tokens en contexto completo: ~{len(full_context.split())}")
    print(f"   ‚Ä¢ Tokens en contexto trimmed: ~{len(trimmed_context.split())}")
    print(f"   ‚Ä¢ Reducci√≥n de tokens: ~{len(full_context.split()) - len(trimmed_context.split())}")
    
    print(f"\n‚úÖ Test completado exitosamente")
    print(f"   El mecanismo de sliding window est√° funcionando correctamente.")
    print(f"   Los turnos m√°s antiguos se eliminan cuando se supera el l√≠mite de tokens.")


def test_with_production_config():
    """Prueba con la configuraci√≥n de producci√≥n"""
    
    print("\n" + "="*80)
    print("TEST: Configuraci√≥n de Producci√≥n")
    print("="*80)
    
    # Configuraci√≥n de producci√≥n
    config = {
        'max_history_turns': 15,
        'context_window_tokens': 180000,  # 90% de 200K
        'enable_sliding_window': True,
        'min_turns_to_keep': 3
    }
    
    conv_manager = ConversationManager(config)
    session_id = "test-session-production"
    conv_manager.create_conversation(session_id)
    
    print(f"\nüìã Configuraci√≥n de producci√≥n:")
    print(f"   ‚Ä¢ Max history turns: {config['max_history_turns']}")
    print(f"   ‚Ä¢ Context window tokens: {config['context_window_tokens']:,}")
    print(f"   ‚Ä¢ Sliding window enabled: {config['enable_sliding_window']}")
    
    # Simular conversaci√≥n con contenido muy largo (como resultados de herramientas)
    print(f"\nüîÑ Simulando conversaci√≥n con contenido extenso...\n")
    
    for i in range(20):
        # Simular mensaje con contenido extenso (como resultado de get_file_content)
        user_message = f"Pregunta {i+1}: Dame el contenido del archivo X"
        # Simular respuesta con contenido muy largo (ej: 50K tokens)
        assistant_message = "Aqu√≠ est√° el contenido del archivo:\n" + ("L√≠nea de contenido. " * 10000)
        
        conv_manager.add_user_turn(
            session_id=session_id,
            message=user_message,
            tokens=len(user_message.split())
        )
        
        conv_manager.add_assistant_turn(
            session_id=session_id,
            response=assistant_message,
            tokens=len(assistant_message.split())
        )
        
        stats = conv_manager.get_conversation_stats(session_id)
        
        if (i + 1) % 5 == 0:  # Mostrar cada 5 turnos
            print(f"Despu√©s de {i+1} turnos:")
            print(f"   ‚Ä¢ Total tokens acumulados: {stats['total_tokens']:,}")
            
            # Verificar si se aplicar√≠a sliding window
            if stats['total_tokens'] > config['context_window_tokens']:
                context = conv_manager.trim_context_to_window(
                    session_id=session_id,
                    max_tokens=config['context_window_tokens']
                )
                turns_in_context = context.count('Human:')
                print(f"   ‚Ä¢ Turnos que se mantendr√≠an: {turns_in_context} de {stats['total_turns'] // 2}")
                print(f"   ‚Ä¢ ‚ö†Ô∏è  Sliding window ACTIVO")
            else:
                print(f"   ‚Ä¢ Sliding window no necesario a√∫n")
            print()
    
    final_stats = conv_manager.get_conversation_stats(session_id)
    print(f"\nüìä Resultado final:")
    print(f"   ‚Ä¢ Total turnos: {final_stats['total_turns']}")
    print(f"   ‚Ä¢ Total tokens: {final_stats['total_tokens']:,}")
    
    trimmed_context = conv_manager.trim_context_to_window(
        session_id=session_id,
        max_tokens=config['context_window_tokens']
    )
    turns_trimmed = trimmed_context.count('Human:')
    
    print(f"   ‚Ä¢ Turnos que se enviar√≠an al LLM: {turns_trimmed}")
    print(f"   ‚Ä¢ Tokens que se enviar√≠an: ~{len(trimmed_context.split()):,}")
    print(f"\n‚úÖ El sistema mantiene el historial dentro del l√≠mite de {config['context_window_tokens']:,} tokens")


if __name__ == "__main__":
    try:
        test_sliding_window()
        test_with_production_config()
        
        print("\n" + "="*80)
        print("‚úÖ TODOS LOS TESTS PASARON EXITOSAMENTE")
        print("="*80)
        
    except Exception as e:
        logger.error(f"Error en los tests: {str(e)}", exc_info=True)
        sys.exit(1)
