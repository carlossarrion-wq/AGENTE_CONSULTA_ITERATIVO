#!/usr/bin/env python3
"""
Script de prueba para verificar la implementaci√≥n de colores en el agente
"""

import sys
import os

# Agregar el directorio padre al path para importar los m√≥dulos
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from color_utils import (
    user_text, llm_request, llm_response, tool_result,
    info, warning, error, success, header, dim_text,
    format_user_input_section, format_llm_request_section,
    format_llm_response_section, format_tool_result_section,
    format_metrics_section, Colors
)


def test_basic_colors():
    """Prueba los colores b√°sicos"""
    print("\n" + "="*80)
    print("PRUEBA DE COLORES B√ÅSICOS")
    print("="*80 + "\n")
    
    print(user_text("üë§ Texto del usuario (negro)"))
    print(llm_request("üì§ Texto de request al LLM (azul)"))
    print(llm_response("üì• Texto de respuesta del LLM (verde)"))
    print(tool_result("üîß Texto de resultado de herramientas (rojo)"))
    print()


def test_helper_colors():
    """Prueba los colores auxiliares"""
    print("\n" + "="*80)
    print("PRUEBA DE COLORES AUXILIARES")
    print("="*80 + "\n")
    
    print(info("‚ÑπÔ∏è  Mensaje informativo (cian)"))
    print(warning("‚ö†Ô∏è  Mensaje de advertencia (amarillo)"))
    print(error("‚ùå Mensaje de error (rojo brillante)"))
    print(success("‚úÖ Mensaje de √©xito (verde brillante)"))
    print(header("üìã Encabezado (negrita)"))
    print(dim_text("Texto atenuado (gris)"))
    print()


def test_formatted_sections():
    """Prueba las secciones formateadas"""
    print("\n" + "="*80)
    print("PRUEBA DE SECCIONES FORMATEADAS")
    print("="*80 + "\n")
    
    # Secci√≥n de input del usuario
    print(format_user_input_section("¬øCu√°les son los principales m√≥dulos de Darwin?"))
    
    # Secci√≥n de request al LLM
    print(format_llm_request_section(
        system_prompt="Eres un asistente especializado...",
        user_input="¬øCu√°les son los principales m√≥dulos de Darwin?",
        conversation_history=["User: Hola", "Assistant: Hola, ¬øen qu√© puedo ayudarte?"]
    ))
    
    # Secci√≥n de respuesta del LLM
    print(format_llm_response_section(
        content="Los principales m√≥dulos de Darwin son...",
        model="claude-haiku-4-5",
        tokens_input=150,
        tokens_output=200,
        execution_time_ms=1234.56
    ))
    
    # Secci√≥n de resultado de herramientas
    print(format_tool_result_section(
        tool_name="semantic_search",
        success=True,
        execution_time_ms=567.89,
        result_data={"fragments": [{"file_name": "test.md", "content": "contenido..."}]}
    ))
    
    # Secci√≥n de m√©tricas
    print(format_metrics_section(
        total_time_ms=2500.0,
        llm_time_ms=1500.0,
        tools_time_ms=800.0,
        tokens_input=150,
        tokens_output=200,
        cache_tokens_saved=50,
        tools_executed=2,
        tools_successful=2
    ))


def test_color_toggle():
    """Prueba el toggle de colores"""
    print("\n" + "="*80)
    print("PRUEBA DE TOGGLE DE COLORES")
    print("="*80 + "\n")
    
    print("Colores habilitados:")
    print(user_text("Texto del usuario"))
    print(llm_response("Respuesta del LLM"))
    print(tool_result("Resultado de herramienta"))
    
    print("\nDeshabilitando colores...")
    Colors.disable()
    
    print("\nColores deshabilitados:")
    print(user_text("Texto del usuario"))
    print(llm_response("Respuesta del LLM"))
    print(tool_result("Resultado de herramienta"))
    
    print("\nHabilitando colores nuevamente...")
    Colors.enable()
    
    print("\nColores habilitados:")
    print(user_text("Texto del usuario"))
    print(llm_response("Respuesta del LLM"))
    print(tool_result("Resultado de herramienta"))
    print()


def test_mixed_content():
    """Prueba contenido mixto simulando una conversaci√≥n real"""
    print("\n" + "="*80)
    print("SIMULACI√ìN DE CONVERSACI√ìN CON COLORES")
    print("="*80 + "\n")
    
    # Usuario hace una pregunta
    print(header("üë§ USUARIO:"))
    print(user_text("¬øCu√°les son los principales m√≥dulos de Darwin?"))
    print()
    
    # Sistema env√≠a request al LLM
    print(header("üì§ ENVIANDO AL LLM:"))
    print(llm_request("System: Eres un asistente especializado..."))
    print(llm_request("User: ¬øCu√°les son los principales m√≥dulos de Darwin?"))
    print()
    
    # LLM solicita herramientas
    print(header("üì• RESPUESTA DEL LLM:"))
    print(llm_response("Para responder tu pregunta, necesito buscar informaci√≥n."))
    print(llm_response("<semantic_search>"))
    print(llm_response("  <query>m√≥dulos principales Darwin</query>"))
    print(llm_response("</semantic_search>"))
    print()
    
    # Ejecuci√≥n de herramientas
    print(header("üîß EJECUTANDO HERRAMIENTAS:"))
    print(tool_result("Herramienta: semantic_search"))
    print(tool_result("Estado: ‚úÖ Exitosa"))
    print(tool_result("Tiempo: 567.89ms"))
    print(tool_result("Resultados: 5 fragmentos encontrados"))
    print()
    
    # Respuesta final del LLM
    print(header("üì• RESPUESTA FINAL DEL LLM:"))
    print(llm_response("Los principales m√≥dulos de Darwin son:"))
    print(llm_response("1. M√≥dulo de Gesti√≥n de Usuarios"))
    print(llm_response("2. M√≥dulo de Procesamiento de Datos"))
    print(llm_response("3. M√≥dulo de Reportes"))
    print()
    
    # M√©tricas
    print(header("üìä M√âTRICAS:"))
    print(info(f"‚è±Ô∏è  Tiempo total: 2500.00ms"))
    print(info(f"ü§ñ Tiempo LLM: 1500.00ms"))
    print(info(f"üîß Tiempo herramientas: 800.00ms"))
    print(success(f"‚úÖ Procesamiento completado exitosamente"))
    print()


def main():
    """Funci√≥n principal"""
    print("\n" + "="*80)
    print("PRUEBA DE IMPLEMENTACI√ìN DE COLORES EN EL AGENTE")
    print("="*80)
    
    try:
        test_basic_colors()
        test_helper_colors()
        test_formatted_sections()
        test_color_toggle()
        test_mixed_content()
        
        print("\n" + "="*80)
        print(success("‚úÖ TODAS LAS PRUEBAS COMPLETADAS EXITOSAMENTE"))
        print("="*80 + "\n")
        
    except Exception as e:
        print("\n" + "="*80)
        print(error(f"‚ùå ERROR EN LAS PRUEBAS: {str(e)}"))
        print("="*80 + "\n")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
