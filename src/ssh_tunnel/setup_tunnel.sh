#!/bin/bash
# Script para configurar el t√∫nel SSH a OpenSearch y probar las herramientas Darwin

set -e

echo "üöÄ Configurando t√∫nel SSH a OpenSearch Darwin..."

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuraci√≥n
SSH_KEY="~/.ssh/ec2_new_key"
EC2_HOST="ec2-user@52.18.245.120"
OPENSEARCH_HOST="vpc-rag-opensearch-clean-qodnaopeuroal2f6intbz7i5xy.eu-west-1.es.amazonaws.com"
LOCAL_PORT="9201"

echo -e "${BLUE}üìã Configuraci√≥n:${NC}"
echo -e "   SSH Key: ${SSH_KEY}"
echo -e "   EC2 Host: ${EC2_HOST}"
echo -e "   OpenSearch: ${OPENSEARCH_HOST}"
echo -e "   Puerto local: ${LOCAL_PORT}"
echo ""

# Funci√≥n para verificar si el t√∫nel est√° activo
check_tunnel() {
    if pgrep -f "ssh.*${LOCAL_PORT}:${OPENSEARCH_HOST}:443" > /dev/null; then
        return 0
    else
        return 1
    fi
}

# Funci√≥n para crear el t√∫nel
create_tunnel() {
    echo -e "${YELLOW}üîß Creando t√∫nel SSH...${NC}"
    ssh -i ${SSH_KEY} -L ${LOCAL_PORT}:${OPENSEARCH_HOST}:443 -N -f ${EC2_HOST}
    
    # Esperar un momento para que se establezca
    sleep 2
    
    if check_tunnel; then
        echo -e "${GREEN}‚úÖ T√∫nel SSH creado exitosamente${NC}"
        return 0
    else
        echo -e "${RED}‚ùå Error creando el t√∫nel SSH${NC}"
        return 1
    fi
}

# Funci√≥n para terminar t√∫neles existentes
kill_existing_tunnels() {
    echo -e "${YELLOW}üîÑ Terminando t√∫neles SSH existentes...${NC}"
    pkill -f "ssh.*${LOCAL_PORT}:${OPENSEARCH_HOST}:443" 2>/dev/null || true
    sleep 1
}

# Funci√≥n para verificar conectividad
test_connectivity() {
    echo -e "${YELLOW}üîç Verificando conectividad...${NC}"
    
    # Test b√°sico con curl
    if curl -k -s --max-time 5 https://localhost:${LOCAL_PORT}/_cluster/health > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Conectividad a OpenSearch verificada${NC}"
        return 0
    else
        echo -e "${RED}‚ùå No se puede conectar a OpenSearch${NC}"
        return 1
    fi
}

# Funci√≥n para configurar variables de entorno
setup_environment() {
    echo -e "${YELLOW}üåç Configurando variables de entorno...${NC}"
    
    export OPENSEARCH_HOST="localhost:${LOCAL_PORT}"
    export OPENSEARCH_USE_SSL="true"
    export OPENSEARCH_VERIFY_CERTS="false"
    
    echo -e "${GREEN}‚úÖ Variables de entorno configuradas:${NC}"
    echo -e "   OPENSEARCH_HOST=${OPENSEARCH_HOST}"
    echo -e "   OPENSEARCH_USE_SSL=${OPENSEARCH_USE_SSL}"
    echo -e "   OPENSEARCH_VERIFY_CERTS=${OPENSEARCH_VERIFY_CERTS}"
}

# Funci√≥n para probar las herramientas
test_tools() {
    echo -e "${YELLOW}üß™ Probando herramientas Darwin...${NC}"
    
    # Activar entorno virtual
    if [ -d "venv" ]; then
        source venv/bin/activate
        echo -e "${GREEN}‚úÖ Entorno virtual activado${NC}"
    else
        echo -e "${RED}‚ùå Entorno virtual no encontrado${NC}"
        return 1
    fi
    
    # Test 1: B√∫squeda l√©xica
    echo -e "${BLUE}üîç Test 1: B√∫squeda l√©xica...${NC}"
    if python3 src/lexical_search.py "darwin" --top-k 2 > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ B√∫squeda l√©xica: OK${NC}"
    else
        echo -e "${RED}‚ùå B√∫squeda l√©xica: FALLO${NC}"
    fi
    
    # Test 2: B√∫squeda sem√°ntica
    echo -e "${BLUE}üîç Test 2: B√∫squeda sem√°ntica...${NC}"
    if python3 src/semantic_search.py "sistema" --top-k 2 > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ B√∫squeda sem√°ntica: OK${NC}"
    else
        echo -e "${RED}‚ùå B√∫squeda sem√°ntica: FALLO${NC}"
    fi
    
    # Test 3: B√∫squeda regex
    echo -e "${BLUE}üîç Test 3: B√∫squeda regex...${NC}"
    if python3 src/regex_search.py "Darwin" --max-matches-per-file 2 > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ B√∫squeda regex: OK${NC}"
    else
        echo -e "${RED}‚ùå B√∫squeda regex: FALLO${NC}"
    fi
    
    echo -e "${GREEN}üéâ Todas las herramientas est√°n funcionando correctamente!${NC}"
}

# Funci√≥n para mostrar ayuda
show_help() {
    echo -e "${BLUE}üìñ Uso del script:${NC}"
    echo -e "   $0 start    - Crear t√∫nel y configurar entorno"
    echo -e "   $0 stop     - Terminar t√∫nel SSH"
    echo -e "   $0 status   - Verificar estado del t√∫nel"
    echo -e "   $0 test     - Probar herramientas"
    echo -e "   $0 restart  - Reiniciar t√∫nel"
    echo ""
    echo -e "${BLUE}üìù Ejemplos de uso de herramientas:${NC}"
    echo -e "   python3 src/semantic_search.py 'configuraci√≥n usuarios'"
    echo -e "   python3 src/lexical_search.py 'darwin' --top-k 10"
    echo -e "   python3 src/regex_search.py 'NU\\d+' --context-lines 3"
    echo -e "   python3 src/get_file_content.py 'archivo.docx'"
}

# Funci√≥n principal
main() {
    case "${1:-start}" in
        "start")
            echo -e "${BLUE}üöÄ Iniciando configuraci√≥n completa...${NC}"
            kill_existing_tunnels
            if create_tunnel && test_connectivity; then
                setup_environment
                echo ""
                echo -e "${GREEN}üéâ ¬°Configuraci√≥n completada exitosamente!${NC}"
                echo -e "${BLUE}üí° Ahora puedes usar las herramientas Darwin:${NC}"
                echo -e "   source venv/bin/activate"
                echo -e "   python3 src/lexical_search.py 'darwin'"
                echo ""
                echo -e "${YELLOW}‚ö†Ô∏è  Para terminar el t√∫nel: $0 stop${NC}"
            else
                echo -e "${RED}‚ùå Error en la configuraci√≥n${NC}"
                exit 1
            fi
            ;;
        "stop")
            echo -e "${YELLOW}üõë Terminando t√∫nel SSH...${NC}"
            kill_existing_tunnels
            echo -e "${GREEN}‚úÖ T√∫nel terminado${NC}"
            ;;
        "status")
            if check_tunnel; then
                echo -e "${GREEN}‚úÖ T√∫nel SSH activo${NC}"
                test_connectivity
            else
                echo -e "${RED}‚ùå T√∫nel SSH no activo${NC}"
            fi
            ;;
        "test")
            if check_tunnel; then
                setup_environment
                test_tools
            else
                echo -e "${RED}‚ùå T√∫nel no activo. Ejecuta: $0 start${NC}"
                exit 1
            fi
            ;;
        "restart")
            echo -e "${YELLOW}üîÑ Reiniciando t√∫nel...${NC}"
            kill_existing_tunnels
            sleep 2
            create_tunnel
            test_connectivity
            setup_environment
            ;;
        "help"|"-h"|"--help")
            show_help
            ;;
        *)
            echo -e "${RED}‚ùå Comando no reconocido: $1${NC}"
            show_help
            exit 1
            ;;
    esac
}

# Ejecutar funci√≥n principal
main "$@"
